package osakerekisteri.test;
// Generated by ComTest BEGIN
import java.io.File;
import osakerekisteri.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.05.05 13:17:00 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class OsakkeetTest {



  // Generated by ComTest BEGIN
  /** 
   * testAdd58 
   * @throws StoreException when error
   */
  @Test
  public void testAdd58() throws StoreException {    // Osakkeet: 58
    Osakkeet stocks = new Osakkeet(); 
    Osake stock1 = new Osake(), stock2 = new Osake(); 
    assertEquals("From: Osakkeet line: 62", 0, stocks.getAmount()); 
    stocks.add(stock1); assertEquals("From: Osakkeet line: 63", 1, stocks.getAmount()); 
    stocks.add(stock2); assertEquals("From: Osakkeet line: 64", 2, stocks.getAmount()); 
    stocks.add(stock1); assertEquals("From: Osakkeet line: 65", 3, stocks.getAmount()); 
    assertEquals("From: Osakkeet line: 66", stock1, stocks.give(0)); 
    assertEquals("From: Osakkeet line: 67", stock2, stocks.give(1)); 
    assertEquals("From: Osakkeet line: 68", stock1, stocks.give(2)); 
    assertEquals("From: Osakkeet line: 69", false, stocks.give(1) == stock1); 
    assertEquals("From: Osakkeet line: 70", true, stocks.give(1) == stock2); 
    try {
    assertEquals("From: Osakkeet line: 71", stock1, stocks.give(3)); 
    fail("Osakkeet: 71 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    stocks.add(stock1); assertEquals("From: Osakkeet line: 72", 4, stocks.getAmount()); 
    stocks.add(stock1); assertEquals("From: Osakkeet line: 73", 5, stocks.getAmount()); 
    stocks.add(stock1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testReadFromFile114 
   * @throws StoreException when error
   */
  @Test
  public void testReadFromFile114() throws StoreException {    // Osakkeet: 114
    Osakkeet stocks = new Osakkeet(); 
    Osake stock1 = new Osake(), stock2 = new Osake(); 
    String directory = "teststocks"; 
    String fileName = directory+"/stocks"; 
    File ftied = new File(fileName+".dat"); 
    File dir = new File(directory); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    stocks.readFromFile(fileName); 
    fail("Osakkeet: 126 Did not throw StoreException");
    } catch(StoreException _e_){ _e_.getMessage(); }
    stocks.add(stock1); 
    stocks.add(stock2); 
    stocks.save(); 
    stocks = new Osakkeet();  // Poistetaan vanhat luomalla uusi
    stocks.readFromFile(fileName);  // johon ladataan tiedot tiedostosta.
    Iterator<Osake> i = stocks.iterator(); 
    assertEquals("From: Osakkeet line: 133", stock1.toString(), i.next().toString()); 
    assertEquals("From: Osakkeet line: 134", stock2.toString(), i.next().toString()); 
    assertEquals("From: Osakkeet line: 135", false, i.hasNext()); 
    stocks.add(stock2); 
    stocks.save(); 
    assertEquals("From: Osakkeet line: 138", true, ftied.delete()); 
    File fbak = new File(fileName+".bak"); 
    assertEquals("From: Osakkeet line: 140", true, fbak.delete()); 
    assertEquals("From: Osakkeet line: 141", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testOsakkeetIterator303 
   * @throws StoreException when error
   */
  @Test
  public void testOsakkeetIterator303() throws StoreException {    // Osakkeet: 303
    Osakkeet stocks = new Osakkeet(); 
    Osake stock1 = new Osake(), stock2 = new Osake(); 
    stock1.register(); stock2.register(); 
    stocks.add(stock1); 
    stocks.add(stock2); 
    stocks.add(stock1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Osake stock:stocks) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+stock.getId()); 
    String tulos = " " + stock1.getId() + " " + stock2.getId() + " " + stock1.getId(); 
    assertEquals("From: Osakkeet line: 322", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Osake>  i=stocks.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Osake stock = i.next(); 
    ids.append(" "+stock.getId()); 
    }
    assertEquals("From: Osakkeet line: 330", tulos, ids.toString()); 
    Iterator<Osake>  i=stocks.iterator(); 
    assertEquals("From: Osakkeet line: 333", true, i.next() == stock1); 
    assertEquals("From: Osakkeet line: 334", true, i.next() == stock2); 
    assertEquals("From: Osakkeet line: 335", true, i.next() == stock1); 
    try {
    i.next(); 
    fail("Osakkeet: 337 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testSearch387 
   * @throws StoreException when error
   */
  @Test
  public void testSearch387() throws StoreException {    // Osakkeet: 387
    Osakkeet stocks = new Osakkeet(); 
    Osake stock3 = new Osake(); stock3.parse("1|Nokia Oyj|200|3.12|624.00|"); 
    Osake stock4 = new Osake(); stock4.parse("2|Nokia Oyj|200|3.12|624.00|"); 
    Osake stock5 = new Osake(); stock5.parse("3|Olvi Oyj|80|35.00|2800.00|"); 
    stocks.add(stock3); stocks.add(stock4); stocks.add(stock5); 
    List<Osake> loytyneet; 
    loytyneet = (List<Osake>)stocks.search("*s*",0); 
    assertEquals("From: Osakkeet line: 396", 0, loytyneet.size()); 
    loytyneet = (List<Osake>)stocks.search("*N*",0); 
    assertEquals("From: Osakkeet line: 398", 2, loytyneet.size()); 
    assertEquals("From: Osakkeet line: 399", true, loytyneet.get(0) == stock3); 
    assertEquals("From: Osakkeet line: 400", true, loytyneet.get(1) == stock4); 
    loytyneet = (List<Osake>)stocks.search(null,-1); 
    assertEquals("From: Osakkeet line: 402", 3, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testSearchId440 
   * @throws StoreException when error
   */
  @Test
  public void testSearchId440() throws StoreException {    // Osakkeet: 440
    Osakkeet stocks = new Osakkeet(); 
    Osake aku1 = new Osake(), aku2 = new Osake(), aku3 = new Osake(); 
    aku1.register(); aku2.register(); aku3.register(); 
    int id1 = aku1.getId(); 
    stocks.add(aku1); stocks.add(aku2); stocks.add(aku3); 
    assertEquals("From: Osakkeet line: 447", 1, stocks.searchId(id1+1)); 
    assertEquals("From: Osakkeet line: 448", 2, stocks.searchId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGiveId462 
   * @throws StoreException when error
   */
  @Test
  public void testGiveId462() throws StoreException {    // Osakkeet: 462
    Osakkeet stocks = new Osakkeet(); 
    Osake aku1 = new Osake(), aku2 = new Osake(), aku3 = new Osake(); 
    aku1.register(); aku2.register(); aku3.register(); 
    int id1 = aku1.getId(); 
    stocks.add(aku1); stocks.add(aku2); stocks.add(aku3); 
    assertEquals("From: Osakkeet line: 469", true, stocks.giveId(id1  ) == aku1); 
    assertEquals("From: Osakkeet line: 470", true, stocks.giveId(id1+1) == aku2); 
    assertEquals("From: Osakkeet line: 471", true, stocks.giveId(id1+2) == aku3); 
  } // Generated by ComTest END
}